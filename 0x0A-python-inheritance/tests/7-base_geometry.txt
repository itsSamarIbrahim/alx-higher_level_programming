========================================
The ```7-base_geometry``` module
========================================

Using ```BaseGeometry```
----------------------------------------

Import the class:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now test it:

The 'area' method is not implemented and should always raise an exception.

    >>> base_geom = BaseGeometry()
    >>> base_geom.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented

Testing 'integer_validator' method
----------------------------------

The 'integer_validator' should accept integers greater than 0.

    >>> base_geom.integer_validator("side", 5)
    >>> base_geom.integer_validator("radius", 10)

Passing a non-integer should raise a TypeError.

    >>> base_geom.integer_validator("side", "5")
    Traceback (most recent call last):
        ...
    TypeError: <name> must be an integer

Passing an integer less than or equal to 0 should raise a ValueError.

    >>> base_geom.integer_validator("side", -5)
    Traceback (most recent call last):
        ...
    ValueError: <name> must be greater than 0
    >>> base_geom.integer_validator("side", 0)
    Traceback (most recent call last):
        ...
    ValueError: <name> must be greater than 0

Testing the 'integer_validator' method of BaseGeometry class.

Passing a string instead of an integer should raise a TypeError.

    >>> base_geom = BaseGeometry()
    >>> base_geom.integer_validator("side", "string")
    Traceback (most recent call last):
        ...
    TypeError: <name> must be an integer

Passing a float instead of an integer should raise a TypeError.

    >>> base_geom.integer_validator("side", 3.14)
    Traceback (most recent call last):
        ...
    TypeError: <name> must be an integer

Passing a complex number instead of an integer should raise a TypeError.

    >>> base_geom.integer_validator("side", 1+2j)
    Traceback (most recent call last):
        ...
    TypeError: <name> must be an integer

Passing a boolean instead of an integer should raise a TypeError.

    >>> base_geom.integer_validator("side", True)
    Traceback (most recent call last):
        ...
    TypeError: <name> must be an integer

Passing a list instead of an integer should raise a TypeError.

    >>> base_geom.integer_validator("side", [1, 2, 3])
    Traceback (most recent call last):
        ...
    TypeError: <name> must be an integer

Passing a dictionary instead of an integer should raise a TypeError.

    >>> base_geom.integer_validator("side", {'one': 1})
    Traceback (most recent call last):
        ...
    TypeError: <name> must be an integer

Passing None instead of an integer should raise a TypeError.

    >>> base_geom.integer_validator("side", None)
    Traceback (most recent call last):
        ...
    TypeError: <name> must be an integer

--------------------

Passing one argument to integer_validator
    >>> base_geom = BaseGeometry()
    >>> base_geom.integer_validator("name")
    Traceback (most recent call last):
          ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

Integer_validator with no arguments
    >>> base_geom = BaseGeometry()
    >>> base_geom.integer_validator()
    Traceback (most recent call last):
          ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

